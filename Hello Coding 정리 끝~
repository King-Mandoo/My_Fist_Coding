2022.01.05 챕터 2 
모든 함수는 마지막에 소괄호를 붙여줌.
함수란 '특정 기능을 수행하는 코드 묶음'
Console.Write() 함수는 화면에 글자를 출력하는 기능을 함.
Console.WriteLine() 함수는 화면에 글자를 출력 한 뒤 새 줄을 만듬.
\는 특수문자 \ , ' , " 를 출력하게 해줌
(앞에 붙여야함)

2022.01.06 챕터 3
상수: 변하지 않는 수
정수형, 실수형, 문자열형
=
컴퓨터 세계에서 =은 이름을 붙여주는 역할을 함.
string
문자열형 (글자를 줄줄이 늘어놓았다는 의미)
int
정수형  >> integer(정수). 
double
실수형 ( 컴퓨터의 실수형 저장 방법을 배워야 이해 가능)
<상수의 종류> <상수의 이름> = <상수>;
상수에 이름을 붙여줄 때의 문법.
상수에 이름을 붙여 주는 이유
1. 코드를 읽기가 쉬워짐.
2. 실수를 줄일 수 있음.
3. 같은 값을 여러 번 넣을 때 편리함.
*상수에 이름을 붙이자!

2022. 01. 07 챕터 4
+ 더하기
문자열도 더하기 가능!
하지만 빼기는 안됨.
- 빼기
/  나누기
*  곱하기
%  나머지
변수(variable)
'바뀔 수 있는 무언가', '값을 저장하는 저장소'
vary + able
*상수에 이름을 붙여주는 것을 그냥 '변수를 선언한다'라고 하기도 한다'
*변수는 =를 기준으로 수식의 왼쪽에 와야함.
apple count = apple count - 2 (o)
apple count -3 = apple count (x)
*변수에는 값이 있어야함.
int pearCount;    (x)
int pearCount = 15; (o)

디버깅(debugging)
프로그램의 문제점을 '버그', 이것을 없애는 것을 '디버그'라고 함.
'자동 창, 로컬 창, 조사식 창'을 통해 어디서 버그가 났는지 찾을 수 있음.
(F10으로 노란색 화살표 위치를 바꿔가면서 확인)
중단점(브래이킹 포인트) F9
프로그램 실행을 특정 지점에서 잠시 중단시키기 위해 설정하는 지시자

2022. 01. 08 챕터5
입력
컴퓨터에 사용자가 정보를 넘기는 모든 행위
Console.ReadLine()
이 함수는 사용자의 키보드 입력을 받는다.
이 함수는 사용자의 입력값을 문자열형으로 만들어 준다.
int.Parse()
int는 정수이고 parse는 문자열을 해석하라는 뜻 ,,, 즉, 이 함수는 문자열을 숫자로 해석하라는 뜻!
ex) "245"라는 문자열을 int,Parse()로 변환하면 245라는 정수형이 됨.
double.Parse()
이건 실수 범위까지 해석가능.

2022. 01. 10  챕터 6
>, <
>=, <=
== , !=
조건식
비교연산자를 이용하여 두 개의 값을 비교하는 코드  (  ex.  10 < 32   )
논리자료형(bool)
참과 거짓을 저장하는 변수의 종류
if
if (조건식)
{
         조건을 만족할 때만 실행;
}

*{ }를 입력할 경우 ;처럼 더 이상 같은 줄에 코드를 작성하지 않는다. 다음 줄부터 코드를 입력하되 앞에 공백을 가지는데 이러한 공백을 들여쓰기라고 함.

else
 조건식이 참이 아닌 경우,  즉 조건식이 거짓일 경우를 처리할 때 else를 사용.
else if
if와 else를 합쳐놓은거.
*이걸 쓰는 이유:
비교 횟수를 줄이기 위해서. 헬로코딩 p.145
논리곱연산자(&&)
왼쪽이 참이고 오른쪽도 참이라면
논리합연산자( || )
왼쪽이 참이거나 오른쪽이 참이라면
논리부정연산자( ! )
조건식이 참이라면 거짓으로, 거짓이라면 참으로 바꿔줌.   
*논리부정연산자( ! ) 뒤에 오는 조건식을 ( )로 감싸야 함.

2022. 01. 11  챕터 7
배열(array)
여러 변수가 한 줄로 서 있는 것.
*같은 종류의 변수를 여러 개 만들 때 배열을 사용.
변수의 종류 [ ] 이름 = { 배열 값, 배열값, ... }
*첫 번째 숫자를 읽어 올때 1이 아니라 0을 사용한다. 컴퓨터는 숫자를 셀 때 1부터가 아니라 0부터 센다.
new 변수의 종류 [ ]
new int[6]  -> 이것은 여섯 개의 정수를 넣을 수 있는 배열을 만든다는 뜻이다.
-------------------------------------------------
ex)
 내 생각으로는 int[] furit = new int [5];
 이 명령어 다음에 
furit [3] = int.parse(Console.Readline()); 같은 명령어를 통해서 배열에 값을 넣어주는 것이 일반적인 방식으로 보임.
-------------------------------------------------
컨테이너(container) 
데이터를 한군데 모아 놓을 수 있는 저장소
인덱스
: 배열 안에 들어 있는 값의 위치를 나타냄.
색인: 색인은 책 속의 낱말이나 구절, 또 이에 관련한 지시자를 찾아보기 쉽도록 일정한 순서로 나열한 목록을 가리킨다. 인덱스라고도 한다.

*배열의 한계 (헬로 코딩 p.182 ~ 184)
1. 배열의 크기를 프로그램 실행 중에 바꿀 수 없다는 점.
2. 위치를 지정할 때 정수만 사용할 수 있다는 점.
*따라서 배열 이외에도 리스트,딕셔너리     같은 컨테이너가 있음.

2022. 01. 12 챕터 8
while
while (조건식)
{
      조건을 만족할 때만 실행
}
*if문은 중골화 안의 코드를 한번만 실행하지만, while문은 조건식이 참인 동안 반복해서 중괄호 안의 코드를 실행합니다. 
즉, while 안에 있는 조건식이 계속 참이라면 끊임없이 { } 사이의 코드를 실행한다.

break
while문을 즉시 끝내는 명령어
continue
while문 첫 줄부터 다시 실행함.
헬로 코딩 p.225 참고

2022.01.14 챕터 9 
for
:  ~하는 동안
*while문 : 언제 끝날지 모르는 반복문에 사용.
* for문 :  몇 번 반복할지 알고 있는 반복문에 사용. 

for (초기화 코드; 반족 조건식; 증감문)
{
             반복할 코드
}
// 헬로 코딩 p.248참고
*초기화 코드: 반복문이 실행되기 전 딱 한번만 실행.
반복 조건식: 조건식이 참이면 중괄호 사이의 코드를 실행시킴. 거짓이면 종료
증감문: 중괄호 안의 코드를 한번 실행시킬때마다 코드가 실행된 뒤, 실행됨.

2022.01.17 챕터 10 
Random
Random random = new Random( );   
Random( ); 이란 코도로 랜던 생성기를 만들어
random 변수에 대입.
random.Next (min, max)
min 이상 max 미만  ( min<= ,  max > )
Next(7, 23)dms 7이상 23미만의 숫자가 나옴.

ex)
*int numbers = random.Next(8, 50);
변수 numbers에 8이상 50미만의 숫자가 
무작위로 넣어짐.
        
        
        끝~~
